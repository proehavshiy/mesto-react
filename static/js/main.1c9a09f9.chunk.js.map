{"version":3,"sources":["utils/api.js","contexts/CurrentUserContext.js","images/Mesto-logo.svg","components/Header.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/PopupConfirmDeletion.js","components/Spinner.js","components/App.js","reportWebVitals.js","index.js"],"names":["api","serverUrl","cohort","token","this","_serverUrl","_cohort","_token","response","ok","json","Promise","reject","status","fetch","headers","authorization","then","_checkResponse","name","about","method","body","JSON","stringify","link","cardId","_id","avatar","cardID","like","CurrentUserContext","React","createContext","Header","className","src","logoPath","alt","Card","card","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","owner","isLiked","likes","some","item","onClick","type","aria-label","length","Main","cards","onEditProfile","onAddPlace","onEditAvatar","style","backgroundImage","map","Footer","Date","getFullYear","ImagePopup","onClose","togglePopupState","useEffect","handleEscapeClose","evt","key","document","addEventListener","removeEventListener","target","currentTarget","PopupWithForm","title","submitText","isOpen","onSubmit","submitButtonState","children","noValidate","autoComplete","disabled","value","EditProfilePopup","onUpdateUser","isSubmitting","useState","inputName","setInputName","inputDescription","setInputDescription","valid","submitButtonText","inputNameErrorClass","errorMessage","inputNameErrorCaption","inputDescriptionErrorClass","inputDescriptionErrorCaption","handleUserInput","validity","validationMessage","preventDefault","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","inputLink","setInputLink","inputLinkErrorClass","inputLinkErrorCaption","AddPlacePopup","inputText","setInputText","inputTextErrorClass","inputTextErrorCaption","PopupConfirmDeletion","Spinner","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditProfilePopupOpen","setIsEditProfilePopupOpen","selectedCard","setSelectedCard","closeAllPopups","setCurrentUser","isUserDataReceived","setIsUserDataReceived","setCards","profile","place","setIsSubmitting","all","getUserInfo","getCards","userData","cardData","catch","err","console","log","Provider","state","activatedCard","changeLikeCardStatus","updatedCard","c","deleteCard","filter","newUserData","sendUserInfo","newUserDataFromServer","finally","newUrl","sendUserAvatar","newCardData","sendNewCard","newCardFromServer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1c9a09f9.chunk.js","sourcesContent":["class Api {\n  constructor({ serverUrl, cohort, token, }) {\n    this._serverUrl = serverUrl; // https://mesto.nomoreparties.co/v1\n    //this._requestPath = requestPath; // меняется постоянно напр: users/me\n    this._cohort = cohort; // cohort-22\n    this._token = token; // a039ff03-9c34-4fce-91e0-77cd409474e3\n  }\n  ////метод для единого вызова методов серверных запросов\n  //getPromiseAll(...requests) {\n  //  const promises = [...requests]\n  //  //console.log(\"Promise.all - массив изначальный\",promises);\n  //  return Promise.all(promises)\n  //}\n  //проверка метода\n  _checkResponse(response) {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Ошибка ${response.status}`)\n  }\n  //запрос информации профиля с сервера\n  getUserInfo() {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //запрос карточек с сервера\n  getCards() {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //отправка на сервер новых данных пользователя\n  //Метод PATCH обычно используют для обновления сущностей, уже существующих на сервере\n  sendUserInfo({ name, about }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  sendNewCard({ name, link }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name, //название карточки\n        link: link //ссылка на картинку\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  deleteCard(cardId) {\n    //{ name, link },\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        //name: name, //название карточки\n        //link: link, //ссылка на картинку\n        _id: cardId\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  //Обновление аватара пользователя\n  sendUserAvatar({ avatar }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/likes/${cardID}`, {\n      method: like ? 'PUT' : 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardID: cardID,\n        like: like\n      })\n    })\n      .then(this._checkResponse)\n  }\n\n}\n\nconst api = new Api({\n  serverUrl: 'https://mesto.nomoreparties.co/v1',\n  cohort: 'cohort-22',\n  token: 'a039ff03-9c34-4fce-91e0-77cd409474e3'\n})\n\nexport default api;\n","import React from 'react';\n\nconst CurrentUserContext = React.createContext();\n\nexport default CurrentUserContext;\n","export default __webpack_public_path__ + \"static/media/Mesto-logo.5f3664ca.svg\";","import React from 'react';\nimport logoPath from '../images/Mesto-logo.svg';\n\nfunction Header() {\n  return(\n    <header className=\"header page__section page__header\">\n      <img className=\"logo\" src={logoPath} alt=\"логотип Место\" />\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nfunction Card({ card, onCardClick, onCardLike, onCardDelete}) {\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //проверяем, наша ли карточка. нужен для добавнения кнопки удаления\n  const isOwn = card.owner._id === currentUser._id;\n\n  function handleClick() {\n   onCardClick(card);\n  }\n  function handleLikeClick() {\n    onCardLike(card);\n  }\n  function handleDeleteClick() {\n    onCardDelete(card);\n  }\n\n // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n  const isLiked = card.likes.some(item => {\n    return item._id === currentUser._id;\n  });\n\n  // Создаём переменную, которую после зададим в `className` для кнопки лайка\n  const cardLikeButtonClassName = `button-like_active`;\n\n  return (\n    <figure className=\"element\" key={card._id}>\n      <img className=\"element__image\" src={card.link} alt={card.name} onClick={handleClick} />\n      {isOwn && (\n        <button className=\"element__button-delete page__button\" type=\"button\" aria-label=\"Удалить карточку\" onClick={handleDeleteClick}/>\n      )}\n      <figcaption className=\"element__figcaption\">\n        <h2 className=\"element__card-title\">\n        {card.name}\n        </h2>\n        <div className=\"element__like-section\">\n          <button className={`element__button-like page__button ${isLiked ? (cardLikeButtonClassName) : ('')}`} type=\"button\" onClick={handleLikeClick} />\n          <p className=\"element__like-counter\">\n          {card.likes.length}\n          </p>\n        </div>\n      </figcaption>\n    </figure>\n    )\n  }\n\n  export default Card;\n\n\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\nimport Card from './Card';\n\nfunction Main({ cards, onEditProfile, onAddPlace, onEditAvatar, onCardClick, onCardLike, onCardDelete }) {\n  //подписка на контекст\n  const { name, about, avatar } = React.useContext(CurrentUserContext);\n\n  return(\n    <main className=\"content\">\n      <section className=\"profile page__section page__profile\">\n        <div className=\"profile__avatar avatar-form-open-button\" style={{backgroundImage: `url(${avatar})`}} onClick={onEditAvatar}/>\n        <div className=\"profile__info\">\n          <h1 className=\"profile__title\">\n            {name}\n          </h1>\n          <button className=\"profile__change-button page__button profile-form-open-button\" onClick={onEditProfile} type=\"button\" aria-label=\"Кнопка Редактировать профиль\" />\n          <p className=\"profile__subtitle\">\n            {about}\n          </p>\n        </div>\n        <button className=\"profile__add-button page__button add-card-form-open-button\" onClick={onAddPlace} type=\"button\" aria-label=\"Кнопка Добавить карточку\" />\n      </section>\n      <section className=\"elements page__section\">\n      {cards.map((card) => (\n        <Card key={card._id} card={card} onCardClick={onCardClick} onCardLike={onCardLike} onCardDelete={onCardDelete} />\n        )\n      )}\n      </section>\n    </main>\n  )\n}\nexport default Main;\n\n/*\n{cards.map(({ _id, ...card }) => (\n        <Card key={_id} card={card} onCardClick={onCardClick} onCardLike={handleCardLike} onCardDelete={handleCardDelete} />\n        )\n      )}\n*/\n","import React from 'react';\n\nfunction Footer() {\n  return(\n    <footer className=\"footer page__section\">\n      <p className=\"footer__copyright\">\n        © {new Date().getFullYear()} Mesto Russia\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction ImagePopup({card, onClose}) {\n  const togglePopupState = card ?'popup__flexed popup_opened' : 'popup__flexed';\n\n  //закрытие по крестику, по клику вне формы\n  function handleOverlayClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n  function handleButtonClose(evt) {\n    if(evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n\n  //закрытие по Esc попапов\n  React.useEffect(()=> {\n    if (!card) return;\n\n    const handleEscapeClose = (evt) => {\n      if (evt.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keyup',handleEscapeClose);\n    return () => {\n      document.removeEventListener('keyup', handleEscapeClose);\n    }\n  },[card, onClose]);\n\n  return(\n    <div className={`popup popup_open-image ${togglePopupState}`} onClick={handleOverlayClose}>\n      <div className=\"popup__container popup__container_open-image\">\n          {card ? (\n            <button className=\"popup__button-close popup__button-close_open-image page__button\" onClick={handleButtonClose} type=\"button\" aria-label=\"закрыть изображение\" />\n            ) : ('')\n          }\n          <figure className=\"popup__figure\">\n            <img className=\"popup__image\" src={card ? card.link : ''} alt={card ? `картинка: ${card.name}` : ''} />\n            <figcaption className=\"popup__figcaption\">\n              {card ? card.name : ''}\n            </figcaption>\n          </figure>\n      </div>\n    </div>\n  )\n}\nexport default ImagePopup;\n\n/*\nreturn (\n    <div className={\\`popup popup_type_image ${card && 'popup_is-opened'}\\`}>\n      <div className=\"popup__content popup__content_content_image\">\n        <button type=\"button\" className=\"popup__close\" onClick={onClose}></button>\n        <img alt={card ? card.name : ''} src={card ? card.link : ''} className=\"popup__image\" />\n        <p className=\"popup__caption\">{card ? card.name : ''}</p>\n      </div>\n    </div>\n\n\n    {card ? (\n          <>\n          <button className=\"popup__button-close popup__button-close_open-image page__button\"  type=\"button\" aria-label=\"закрыть изображение\" />\n          <figure className=\"popup__figure\">\n            <img className=\"popup__image\" src={card.link} alt={`картинка: ${card.name}`} />\n            <figcaption className=\"popup__figcaption\">\n              {card.name}\n            </figcaption>\n          </figure>\n          </>\n        ) : ''}\n  );\n*/\n","import React from 'react';\n\nfunction PopupWithForm({name, title, submitText, isOpen, onClose, onSubmit, submitButtonState, children}) {\n  const togglePopupState = isOpen ? 'popup__flexed popup_opened' : 'popup__flexed';\n\n  //закрытие по крестику, по клику вне формы\n  function handleOverlayClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n  function handleButtonClose(evt) {\n    if(evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n\n  //закрытие по Esc попапов\n  React.useEffect(()=> {\n    if (!isOpen) return;\n\n    const handleEscapeClose = (evt) => {\n      if (evt.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keyup',handleEscapeClose);\n    return () => {\n      document.removeEventListener('keyup', handleEscapeClose);\n    }\n  },[isOpen, onClose]);\n\n\n  return(\n    <div className={`popup popup_${name} ${togglePopupState}`} onClick={handleOverlayClose}>\n     <div className={`popup__container popup__container_form popup__container_${name}`}>\n       <button className={`popup__button-close popup__button-close_${name} page__button`} onClick={handleButtonClose} aria-label=\"Кнопка Закрыть форму\" type=\"button\" />\n       <form className=\"popup__form\" onSubmit={onSubmit} name={`${name}-form`}  noValidate autoComplete=\"off\">\n         <h2 className=\"popup__heading\">\n           {title}\n         </h2>\n        {children}\n         <button className={`popup__button-save popup__button-save_${name} page__button ${!submitButtonState && 'popup__button-save_disabled'}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n           {submitText}\n         </button>\n       </form>\n     </div>\n    </div>\n  )\n}\n\nexport default PopupWithForm;\n\n\n/*\n  function handleClickClose(evt) {\n    if (evt.target.classList.contains('popup_opened') || evt.target.classList.contains('popup__button-close') || (evt.target.classList.contains('popup__button-save'))) {\n      onClose()\n    }\n  }\n*/\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser, isSubmitting }) {\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //стейт-переменные для управляемых компонентов форм\n  const [inputName, setInputName] = React.useState({});\n  const [inputDescription, setInputDescription ] = React.useState({});\n\n  const submitButtonState = !inputName.value || !inputDescription.value || !inputName.valid || !inputDescription.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputNameErrorClass = inputName.errorMessage ? 'popup__input_error' : '';\n  const inputNameErrorCaption = inputName.errorMessage ? 'popup__input-error_active' : '';\n\n  const inputDescriptionErrorClass = inputDescription.errorMessage ? 'popup__input_error' : '';\n  const inputDescriptionErrorCaption = inputDescription.errorMessage ? 'popup__input-error_active' : '';\n\n  // После загрузки текущего пользователя из API\n  // его данные будут использованы в управляемых компонентах.\n  React.useEffect(() => {\n    setInputName({\n      value: currentUser.name,\n      valid: true,\n      errorMessage: ''\n    });\n    setInputDescription({\n      value: currentUser.about,\n      valid: true,\n      errorMessage: ''\n    });\n  }, [currentUser]);\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём значения управляемых компонентов во внешний обработчик\n    onUpdateUser({\n      name: inputName.value,\n      about: inputDescription.value,\n    });\n  }\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    if (name === \"profile-name\") {\n      setInputName({\n        value,\n        valid,\n        errorMessage: validationMessage\n      })\n    }\n    if (name === \"profile-signing\") {\n      setInputDescription({\n        value,\n        valid,\n        errorMessage: validationMessage\n      })\n    }\n  }\n\n  return (\n    <PopupWithForm\n      name=\"change-profile\"\n      title=\"Редактировать профиль\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}>\n      <fieldset className=\"popup__profile-information\">\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_profile-name ${inputNameErrorClass}`} value={inputName.value || ''} onChange={handleUserInput} type=\"text\" name=\"profile-name\"  placeholder=\"Имя\" required minLength={2} maxLength={40} />\n          <span className={`popup__input-error popup__input-error_type_profile-name ${inputNameErrorCaption}`}>\n            {inputName.errorMessage}\n          </span>\n        </section>\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_profile-signing ${inputDescriptionErrorClass}`} value={inputDescription.value || ''} onChange={handleUserInput} type=\"text\" name=\"profile-signing\"  placeholder=\"Подпись\" required minLength={2} maxLength={200} />\n          <span className={`popup__input-error popup__input-error_type_profile-signing ${inputDescriptionErrorCaption}`}>\n            {inputDescription.errorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n\n}\n\nexport default EditProfilePopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar, isSubmitting }) {\n  //const url = React.useRef('');\n  const [inputLink, setInputLink] = React.useState({});\n\n  const submitButtonState = !inputLink.value || !inputLink.value || !inputLink.valid || !inputLink.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputLinkErrorClass = inputLink.errorMessage ? 'popup__input_error' : '';\n  const inputLinkErrorCaption = inputLink.errorMessage ? 'popup__input-error_active' : '';\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём новый url во внешний обработчик\n    onUpdateAvatar({\n      avatar: inputLink.value\n    });\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поле после отправки формы\n    //if нужен для того, чтобы в момент ожидания ответа от сервера\n    //кнопка не дизейблилась, и данные инпутов не очищались. так некрасиво\n    if(isSubmitting === true) {\n      setInputLink({\n        value : '',\n        valid: true,\n        errorMessage: ''\n      })\n    }\n  }, [isSubmitting]);\n\n   //обработчик инпутов\n   function handleUserInput({ target }) {\n    const { value, validity: { valid }, validationMessage } = target;\n\n    setInputLink({\n      value,\n      valid,\n      errorMessage: validationMessage\n      })\n    }\n\n  return(\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Обновить аватар\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}>\n      <fieldset className=\"popup__profile-information\">\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_image-link ${inputLinkErrorClass}`} value={inputLink.value || ''} onChange={handleUserInput} type=\"url\" name=\"image-link\"  placeholder=\"Ссылка на картинку\" required />\n          <span className={`popup__input-error popup__input-error_type_image-link ${inputLinkErrorCaption}`}>\n            {inputLink.errorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n}\n\nexport default EditAvatarPopup;\n\n/*\n//валидация инпутов\n  function handleChange(evt){\n    setLink(evt.target.value)\n\n    //вызов валидации\n    handleCheckInputValidity(evt.target);\n  }\n  const [link, setLink] = React.useState('');\n  const [isValidInput, setIsValidInput] = React.useState({\n    name: '',\n    status: ''\n  });\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [submitButton, setSubmitButton] = React.useState('');\n  const toggleInput = isValidInput.status ? ('popup__input_error'):('');\n  const toggleError = isValidInput.status ? ('popup__input-error_active'):('');\n  const toggleMessage = isValidInput.status && errorMessage;\n\n  //проверка валидности\n  function handleCheckInputValidity(input) {\n    if (!input.validity.valid) {\n      //если валидный\n      setIsValidInput({\n        name: input.name,\n        status: true\n      });\n      setErrorMessage(input.validationMessage);\n      setSubmitButton(true)\n    } else {\n      //если невалидный\n      setIsValidInput({\n        name: input.name,\n        status: false\n      });\n      setErrorMessage('');\n      setSubmitButton(false)\n    }\n  }\n  //сброс ошибок при закрытии поля\n  function resetValidation() {\n    setIsValidInput({\n      name: '',\n      status: true\n    });\n    setErrorMessage('');\n  }\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace, isSubmitting }) {\n  const [inputText, setInputText] = React.useState({});\n  const [inputLink, setInputLink] = React.useState({});\n\n  const submitButtonState = !inputText.value || !inputLink.value || !inputText.valid || !inputLink.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Добавление...';\n\n  const inputTextErrorClass = inputText.errorMessage ? 'popup__input_error' : '';\n  const inputTextErrorCaption = inputText.errorMessage ? 'popup__input-error_active' : '';\n\n  const inputLinkErrorClass = inputLink.errorMessage ? 'popup__input_error'  : '';\n  const inputLinkErrorCaption = inputLink.errorMessage ? 'popup__input-error_active'  : '';\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    if (name === \"location-name\") {\n      setInputText({\n        value,\n        valid,\n        errorMessage: validationMessage\n      })\n    }\n    if (name === \"image-link\") {\n      setInputLink({\n        value,\n        valid,\n        errorMessage: validationMessage\n      })\n    }\n  }\n\n  //обработчик формы\n  function handleAddPlaceSubmit(evt) {\n    evt.preventDefault();\n\n    onAddPlace({\n      name: inputText.value,\n      link: inputLink.value\n    })\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля после отправки формы\n    //if нужен для того, чтобы в момент ожидания ответа от сервера\n    //кнопка не дизейблилась, и данные инпутов не очищались. так некрасиво\n    if(isSubmitting === true) {\n      setInputText({});\n      setInputLink({});\n    }\n  }, [isSubmitting]);\n\n  return(\n    <PopupWithForm\n      name=\"add-card\"\n      title=\"Новое место\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleAddPlaceSubmit}\n      submitButtonState={submitButtonState}>\n      <fieldset className=\"popup__profile-information\">\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_location-name ${inputTextErrorClass}`} value={inputText.value || ''} onChange={handleUserInput} type=\"text\" name=\"location-name\"  placeholder=\"Название\" required minLength={2} maxLength={30} />\n          <span className={`popup__input-error popup__input-error_type_location-name ${inputTextErrorCaption}`}>\n            {inputText.errorMessage}\n          </span>\n        </section>\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_image-link ${inputLinkErrorClass}`} value={inputLink.value || ''} onChange={handleUserInput} type=\"url\" name=\"image-link\"  placeholder=\"Ссылка на картинку\" required />\n          <span className={`popup__input-error popup__input-error_type_image-link ${inputLinkErrorCaption}`}>\n          {inputLink.errorMessage}\n          </span>\n        </section>\n      </fieldset>\n      </PopupWithForm>\n  )\n}\n\nexport default AddPlacePopup;\n\n/*\n//для сброса значений при закрытии формы. Зависимость от defaultForm\n  // потому что если от isOpen, я не могу добавить карточку. Данные стейтов очищаются раньше, чем отправка происходит\n  //приходится 2 раза сбрасывать\n  //стейт для сброса полей формы к начальному состоянию\n  const [defaultForm, setDefaultForm] = React.useState(false);\n  //React.useEffect(()=> {\n  //  setInputText('')\n  //  setInputLink('')\n  //  setDefaultForm(false)\n  //},[defaultForm]);\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction PopupConfirmDeletion() {\n  return(\n    <PopupWithForm\n      name=\"confirm-deletion\"\n      title=\"Вы уверены?\"\n      submitText=\"Да\"/>\n  )\n}\n\nexport default PopupConfirmDeletion;\n","import React from 'react';\n\nfunction Spinner() {\n  return(\n    <div className=\"spinner page__section\">\n\t    <div className=\"spinner__part spinner__part_one\"></div>\n\t    <div className=\"spinner__part spinner__part_two\"></div>\n\t    <div className=\"spinner__part spinner__part_three\"></div>\n\t    <div className=\"spinner__part spinner__part_four\"></div>\n\t    <div className=\"spinner__part spinner__part_five\"></div>\n\t    <div className=\"spinner__part spinner__part_six\"></div>\n\t    <div className=\"spinner__part spinner__part_seven\"></div>\n\t    <div className=\"spinner__part spinner__part_eight\"></div>\n    </div>\n  )\n}\n\nexport default Spinner;\n","import React from 'react';\n\nimport api from '../utils/api';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport PopupConfirmDeletion from './PopupConfirmDeletion';\nimport Spinner from './Spinner';\n\nfunction App() {\n\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  //обработчики открытия-закрытия попапов с формой\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  //попап с картинкой\n  function handleCardClick(state) {\n    setSelectedCard(state);\n  }\n  //закрытие попапа\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n  }\n\n  //стейт для юзеринфо\n  const [currentUser, setCurrentUser] = React.useState(null);\n  //проверяем статус получения данных. Если false, не рендерим Main и Footer\n  const [isUserDataReceived, setIsUserDataReceived] = React.useState(false);\n  //стейт для карточек\n  const [cards, setCards] = React.useState([]);\n  // submit status\n  const [isSubmitting, setIsSubmitting] = React.useState({\n    profile: true,\n    avatar: true,\n    place: true\n  });\n\n  React.useEffect(()=> {\n    Promise.all([api.getUserInfo(), api.getCards()])\n    .then(([userData, cardData]) => {\n      setCurrentUser(userData);\n      setCards(cardData);\n      //console.log('userData',userData)\n      setIsUserDataReceived(true);\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n  },[])\n\n  //обновление данных пользователя новыми данными из формы редактирования профиля\n  function handleUpdateUser(newUserData) {\n    //submit status в момент ожидания\n    setIsSubmitting({\n      profile: false,\n      avatar: true,\n      place: true\n    });\n    api.sendUserInfo(newUserData)\n    .then((newUserDataFromServer) => {\n      //обновляем контекст стейт currentUser после редактирования формы\n      setCurrentUser(newUserDataFromServer);\n      closeAllPopups();\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n    .finally(() => {\n      //submit status в конце\n      setIsSubmitting({\n        profile: true,\n        avatar: true,\n        place: true\n      });\n    })\n  }\n\n  //обновление аватара новыми данными из формы аватара\n  function handleUpdateAvatar(newUrl) {\n    //submit status в момент ожидания\n    setIsSubmitting({\n      profile: true,\n      avatar: false,\n      place: true\n    });\n    api.sendUserAvatar(newUrl)\n    .then((newUserDataFromServer) => {\n      //обновляем контекст стейт currentUser после редактирования формы\n      setCurrentUser(newUserDataFromServer);\n      closeAllPopups();\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n    .finally(() => {\n      //submit status в конце\n      setIsSubmitting({\n        profile: true,\n        avatar: true,\n        place: true\n      });\n    })\n  }\n\n  //колбэк лайка карточки\n  function handleCardLike(activatedCard) {\n    //проверяем, есть ли уже лайк на этой карточке\n    const isLiked = activatedCard.likes.some(like => like._id === currentUser._id);\n\n    //Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(activatedCard._id, !isLiked)\n    .then((updatedCard) => {\n      //обновляем массив карточек cards для рендеринга с новым кол-вом лайков\n      setCards((state) => state.map((c) => c._id === activatedCard._id ? updatedCard : c));\n      //setCards((state) => {\n      //  //в изначальном массиве перебираем через map карточки\n      //  //если находим лайкнутую, обновляем ее\n      //  //если находим нелайкнутую, не обновляем ее\n      //  return (state.map( (card) => {\n      //    return (card._id === activatedCard._id ? updatedCard : card)\n      //  }))\n      //})\n    })\n    .catch((err) => {\n      console.log(\"ошибка лайка\", err)\n    });\n  }\n\n  //колбэк удаления карточки\n  function handleCardDelete(card) {\n    api.deleteCard(card._id)\n    .then( () => {\n      //оборачиваем setCards в колбек, чтобы удаление карточки со страницы происходило только после возвращения ответа от сервера\n      //после удаления карточки в стейт Cards записываем новый массив оставшихся карточек\n      setCards(\n        cards.filter(item => {\n          //возвращаем только те карточки, которые не совпадают по id с удаленной\n          return item._id !== card._id\n      }))\n    }\n\n    )\n    .catch((err) => {\n      console.log(\"ошибка получения данных\", err)\n    });\n  }\n\n  //добавление новой карточки\n  function handleAddPlace(newCardData) {\n    //submit status в момент ожидания\n    setIsSubmitting({\n      profile: true,\n      avatar: true,\n      place: false\n    });\n    api.sendNewCard(newCardData)\n    .then((newCardFromServer) => {\n      //в стейт Cards дозаписываем новую только что созданную карточку\n      setCards([newCardFromServer, ...cards]);\n      closeAllPopups();\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n    .finally(() => {\n      //submit status в конце\n      setIsSubmitting({\n        profile: true,\n        avatar: true,\n        place: true\n      });\n    })\n  }\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n       <Header/>\n       {isUserDataReceived ? (\n         <>\n          <Main\n            cards={cards}\n            onEditProfile={handleEditProfileClick}\n            onAddPlace={handleAddPlaceClick}\n            onEditAvatar={handleEditAvatarClick}\n            onCardClick={handleCardClick}\n            onCardLike={handleCardLike}\n            onCardDelete={handleCardDelete}/>\n          <Footer />\n          <EditProfilePopup\n            isOpen={isEditProfilePopupOpen}\n            onClose={closeAllPopups}\n            onUpdateUser={handleUpdateUser}\n            isSubmitting={isSubmitting.profile}/>\n          <EditAvatarPopup\n            isOpen={isEditAvatarPopupOpen}\n            onClose={closeAllPopups}\n            onUpdateAvatar={handleUpdateAvatar}\n            isSubmitting={isSubmitting.avatar}/>\n          <AddPlacePopup\n            isOpen={isAddPlacePopupOpen}\n            onClose={closeAllPopups}\n            onAddPlace={handleAddPlace}\n            isSubmitting={isSubmitting.place}/>\n          <ImagePopup\n            card={selectedCard}\n            onClose={closeAllPopups}/>\n          <PopupConfirmDeletion />\n        </>\n       ) : (\n       <Spinner/>\n       )}\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}