{"version":3,"sources":["utils/api.js","utils/auth.js","contexts/CurrentUserContext.js","components/NavBar.js","images/Mesto-logo.svg","components/Header.js","components/Card.js","components/Main.js","components/Footer.js","components/ImagePopup.js","components/Popup.js","components/PopupWithForm.js","components/EditProfilePopup.js","components/EditAvatarPopup.js","components/AddPlacePopup.js","components/PopupConfirmDeletion.js","components/AuthWithForm.js","components/Login.js","components/Register.js","components/StatusPopup.js","components/ProtectedRoute.js","components/Spinner.js","components/App.js","reportWebVitals.js","index.js"],"names":["api","serverUrl","cohort","token","this","_serverUrl","_cohort","_token","response","ok","json","Promise","reject","status","fetch","headers","authorization","then","_checkResponse","name","about","method","body","JSON","stringify","link","cardId","_id","avatar","cardID","like","BASE_URL","checkResponse","CurrentUserContext","React","createContext","NavBar","onSignOut","email","location","useLocation","className","pathname","to","onClick","Header","src","logoPath","alt","Card","card","onCardClick","onCardLike","onCardDelete","currentUser","useContext","isOwn","owner","isLiked","likes","some","item","type","aria-label","length","Main","cards","onEditProfile","onAddPlace","onEditAvatar","style","backgroundImage","map","Footer","Date","getFullYear","ImagePopup","onClose","togglePopupState","useEffect","handleEscapeClose","evt","key","document","addEventListener","removeEventListener","target","currentTarget","Popup","isOpen","children","PopupWithForm","title","submitText","onSubmit","submitButtonState","noValidate","autoComplete","disabled","value","EditProfilePopup","onUpdateUser","isSubmitting","useState","input","setInput","signing","valid","submitButtonText","inputNameErrorClass","errorMessage","inputNameErrorCaption","nameErrorMessage","inputSigningErrorClass","inputSigningErrorCaption","signingErrorMessage","handleUserInput","validity","validationMessage","prevState","preventDefault","onChange","placeholder","required","minLength","maxLength","EditAvatarPopup","onUpdateAvatar","inputLink","setInputLink","inputLinkErrorClass","inputLinkErrorCaption","AddPlacePopup","inputTextErrorClass","inputTextErrorCaption","TextErrorMessage","LinkErrorMessage","PopupConfirmDeletion","handleCardDelete","cardForDeletion","AuthWithForm","isRegister","Login","onLogin","password","inputEmailErrorClass","inputEmailErrorCaption","emailErrorMessage","inputPasswordErrorClass","inputPasswordErrorCaption","passwordErrorMessage","handleLoginInput","Register","onRegister","StatusPopup","popupStatusMessage","history","useHistory","checkout","image","push","ProtectedRoute","Component","component","props","loggedIn","Spinner","App","isEditAvatarPopupOpen","setIsEditAvatarPopupOpen","isAddPlacePopupOpen","setIsAddPlacePopupOpen","isEditProfilePopupOpen","setIsEditProfilePopupOpen","setCardForDeletion","selectedCard","setSelectedCard","setPopupStatusMessage","setIsLoggedIn","setEmail","setCurrentUser","isUserDataReceived","setIsUserDataReceived","setCards","profile","place","login","register","deletion","setIsSubmitting","closeAllPopups","tokenCheck","localStorage","getItem","jwt","res","data","catch","err","console","log","all","getUserInfo","getCards","userData","cardData","Provider","removeItem","path","state","activatedCard","changeLikeCardStatus","updatedCard","c","newUserData","sendUserInfo","newUserDataFromServer","finally","newUrl","sendUserAvatar","newCardData","sendNewCard","newCardFromServer","deleteCard","filter","setItem","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6823b60b.chunk.js","sourcesContent":["class Api {\n  constructor({ serverUrl, cohort, token, }) {\n    this._serverUrl = serverUrl; // https://mesto.nomoreparties.co/v1\n    //this._requestPath = requestPath; // меняется постоянно напр: users/me\n    this._cohort = cohort; // cohort-22\n    this._token = token; // a039ff03-9c34-4fce-91e0-77cd409474e3\n  }\n  ////метод для единого вызова методов серверных запросов\n  //getPromiseAll(...requests) {\n  //  const promises = [...requests]\n  //  //console.log(\"Promise.all - массив изначальный\",promises);\n  //  return Promise.all(promises)\n  //}\n  //проверка метода\n  _checkResponse(response) {\n    if(response.ok) {\n      return response.json();\n    }\n    return Promise.reject(`Ошибка ${response.status}`)\n  }\n  //запрос информации профиля с сервера\n  getUserInfo() {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //запрос карточек с сервера\n  getCards() {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._checkResponse);\n  }\n  //отправка на сервер новых данных пользователя\n  //Метод PATCH обычно используют для обновления сущностей, уже существующих на сервере\n  sendUserInfo({ name, about }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  sendNewCard({ name, link }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name, //название карточки\n        link: link //ссылка на картинку\n      })\n    })\n    .then(this._checkResponse);\n  }\n  //добавление новой карточки на сервер\n  deleteCard(cardId) {\n    //{ name, link },\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        //name: name, //название карточки\n        //link: link, //ссылка на картинку\n        _id: cardId\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  //Обновление аватара пользователя\n  sendUserAvatar({ avatar }) {\n    return fetch(`${this._serverUrl}/${this._cohort}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    })\n    .then(this._checkResponse);\n  }\n\n  changeLikeCardStatus(cardID, like) {\n    return fetch(`${this._serverUrl}/${this._cohort}/cards/likes/${cardID}`, {\n      method: like ? 'PUT' : 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        cardID: cardID,\n        like: like\n      })\n    })\n      .then(this._checkResponse)\n  }\n\n}\n\nconst api = new Api({\n  serverUrl: 'https://mesto.nomoreparties.co/v1',\n  cohort: 'cohort-24',\n  token: 'edb7481a-fcf7-4397-94a7-daeb2327e95b'\n})\n\nexport default api;\n","export const BASE_URL = 'https://auth.nomoreparties.co';\n\nconst checkResponse = (response) => response.ok ? response.json() : Promise.reject(`Ошибка ${response.status}`)\n\nexport const register = (email, password) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            \"password\": password,\n            \"email\": email\n        })\n    })\n    .then(checkResponse);\n}\n\nexport const login = (email, password) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json' \n          },\n          body: JSON.stringify({\n            \"password\": password,\n            \"email\": email\n        })\n    })\n    .then(checkResponse)\n}\n\nexport const getContent = (token) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            \"Authorization\" : `Bearer ${token}`\n        } \n    })\n    .then(checkResponse)\n}","import React from 'react';\n\nconst CurrentUserContext = React.createContext();\n\nexport default CurrentUserContext;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\n\nfunction NavBar({ onSignOut, email} ) {\n    const location = useLocation();\n\n    return (\n      <nav className=\"header__navBar\">\n          {\n            //в зависимости от текущей страницы отображаем нужные поля\n            (location.pathname === '/mesto-react/sign-in' && <NavLink className=\"header__link page__button\" to=\"/mesto-react/sign-up\">Регистрация</NavLink>) ||\n            (location.pathname === '/mesto-react/sign-up' && <NavLink className=\"header__link page__button\" to=\"/mesto-react/sign-in\">Войти</NavLink>) ||\n            (location.pathname === '/mesto-react' &&\n            <>\n                <p className=\"header__email\">{email}</p>\n                <button className=\"header__link header__button page__button\" onClick={onSignOut}>Выйти</button>\n            </>\n            )\n          }\n      </nav>\n    );\n  }\n\n  export default NavBar;\n\n  /*\n  {!loggedIn? (\n              //в зависимости от текущей страницы отображаем нужную ссылку\n              location.pathname === '/sign-in' && <NavLink className=\"header__link page__button\" to=\"/sign-up\">Регистрация</NavLink> ||\n              location.pathname === '/sign-up' && <NavLink className=\"header__link page__button\" to=\"/sign-in\">Войти</NavLink>\n\n          ):(\n            <>\n                <p className=\"header__email\">{email}</p>\n                <button className=\"header__link header__button page__button\" onClick={signOut}>Выйти</button>\n            </>\n          )}\n  */\n","export default __webpack_public_path__ + \"static/media/Mesto-logo.5f3664ca.svg\";","import React from 'react';\nimport NavBar from './NavBar';\nimport logoPath from '../images/Mesto-logo.svg';\n\nfunction Header({ onSignOut, email }) {\n  return(\n    <header className=\"header page__section page__animation page__animation page__header\">\n      <img className=\"logo\" src={logoPath} alt=\"логотип Место\" />\n      <NavBar \n      onSignOut={onSignOut}\n      email={email}/>\n    </header>\n  )\n}\n\nexport default Header;\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nfunction Card({ card, onCardClick, onCardLike, onCardDelete}) {\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //проверяем, наша ли карточка. нужен для добавнения кнопки удаления\n  const isOwn = card.owner._id === currentUser._id;\n\n  function handleClick() {\n   onCardClick(card);\n  }\n  function handleLikeClick() {\n    onCardLike(card);\n  }\n  function handleDeleteClick() {\n    onCardDelete(card); \n  }\n\n // Определяем, есть ли у карточки лайк, поставленный текущим пользователем\n  const isLiked = card.likes.some(item => {\n    return item._id === currentUser._id;\n  });\n\n  // Создаём переменную, которую после зададим в `className` для кнопки лайка\n  const cardLikeButtonClassName = `button-like_active`;\n\n  return (\n    <figure className=\"element\" key={card._id}>\n      <img className=\"element__image\" src={card.link} alt={card.name} onClick={handleClick} />\n      {isOwn && (\n        <button className=\"element__button-delete page__button\" type=\"button\" aria-label=\"Удалить карточку\" onClick={handleDeleteClick}/>\n      )}\n      <figcaption className=\"element__figcaption\">\n        <h2 className=\"element__card-title\">\n        {card.name}\n        </h2>\n        <div className=\"element__like-section\">\n          <button className={`element__button-like page__button ${isLiked ? (cardLikeButtonClassName) : ('')}`} type=\"button\" onClick={handleLikeClick} />\n          <p className=\"element__like-counter\">\n          {card.likes.length}\n          </p>\n        </div>\n      </figcaption>\n    </figure>\n    )\n  }\n\n  export default Card;\n\n\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\nimport Card from './Card';\n\nfunction Main({ cards, onEditProfile, onAddPlace, onEditAvatar, onCardClick, onCardLike, onCardDelete }) {\n  //подписка на контекст\n  const { name, about, avatar } = React.useContext(CurrentUserContext);\n\n  return(\n    <main className=\"content page__block-alignment\">\n      <section className=\"profile page__section page__animation page__profile\">\n        <div className=\"profile__avatar avatar-form-open-button\" style={{backgroundImage: `url(${avatar})`}} onClick={onEditAvatar}/>\n        <div className=\"profile__info\">\n          <h1 className=\"profile__title\">\n            {name}\n          </h1>\n          <button className=\"profile__change-button page__button profile-form-open-button\" onClick={onEditProfile} type=\"button\" aria-label=\"Кнопка Редактировать профиль\" />\n          <p className=\"profile__subtitle\">\n            {about}\n          </p>\n        </div>\n        <button className=\"profile__add-button page__button add-card-form-open-button\" onClick={onAddPlace} type=\"button\" aria-label=\"Кнопка Добавить карточку\" />\n      </section>\n      <section className=\"elements page__section page__animation\">\n      {cards.map((card) => (\n        <Card key={card._id} card={card} onCardClick={onCardClick} onCardLike={onCardLike} onCardDelete={onCardDelete} />\n        )\n      )}\n      </section>\n    </main>\n  )\n}\nexport default Main;\n\n/*\n{cards.map(({ _id, ...card }) => (\n        <Card key={_id} card={card} onCardClick={onCardClick} onCardLike={handleCardLike} onCardDelete={handleCardDelete} />\n        )\n      )}\n*/\n","import React from 'react';\n\nfunction Footer() {\n  return(\n    <footer className=\"footer page__section page__animation\">\n      <p className=\"footer__copyright\">\n        © {new Date().getFullYear()} Mesto Russia\n      </p>\n    </footer>\n  )\n}\n\nexport default Footer;\n","import React from 'react';\n\nfunction ImagePopup({card, onClose}) {\n  const togglePopupState = card ?'popup__flexed popup_opened' : 'popup__flexed';\n\n  //закрытие по крестику, по клику вне формы\n  function handleOverlayClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n  function handleButtonClose(evt) {\n    if(evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n\n  //закрытие по Esc попапов\n  React.useEffect(()=> {\n    if (!card) return;\n\n    const handleEscapeClose = (evt) => {\n      if (evt.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keyup',handleEscapeClose);\n    return () => {\n      document.removeEventListener('keyup', handleEscapeClose);\n    }\n  },[card, onClose]);\n\n  return(\n    <div className={`popup popup_open-image ${togglePopupState}`} onClick={handleOverlayClose}>\n      <div className=\"popup__container popup__container_open-image\">\n          {card ? (\n            <button className=\"popup__button-close popup__button-close_open-image page__button\" onClick={handleButtonClose} type=\"button\" aria-label=\"закрыть изображение\" />\n            ) : ('')\n          }\n          <figure className=\"popup__figure\">\n            <img className=\"popup__image\" src={card ? card.link : ''} alt={card ? `картинка: ${card.name}` : ''} />\n            <figcaption className=\"popup__figcaption\">\n              {card ? card.name : ''}\n            </figcaption>\n          </figure>\n      </div>\n    </div>\n  )\n}\nexport default ImagePopup;\n\n/*\nreturn (\n    <div className={\\`popup popup_type_image ${card && 'popup_is-opened'}\\`}>\n      <div className=\"popup__content popup__content_content_image\">\n        <button type=\"button\" className=\"popup__close\" onClick={onClose}></button>\n        <img alt={card ? card.name : ''} src={card ? card.link : ''} className=\"popup__image\" />\n        <p className=\"popup__caption\">{card ? card.name : ''}</p>\n      </div>\n    </div>\n\n\n    {card ? (\n          <>\n          <button className=\"popup__button-close popup__button-close_open-image page__button\"  type=\"button\" aria-label=\"закрыть изображение\" />\n          <figure className=\"popup__figure\">\n            <img className=\"popup__image\" src={card.link} alt={`картинка: ${card.name}`} />\n            <figcaption className=\"popup__figcaption\">\n              {card.name}\n            </figcaption>\n          </figure>\n          </>\n        ) : ''}\n  );\n*/\n","import React from 'react';\n\nfunction Popup({name, isOpen, onClose, children}) {\n  const togglePopupState = isOpen ? 'popup__flexed popup_opened' : 'popup__flexed';\n\n  //закрытие по крестику, по клику вне формы\n  function handleOverlayClose(evt) {\n    if (evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n  function handleButtonClose(evt) {\n    if(evt.target === evt.currentTarget) {\n      onClose()\n    }\n  }\n\n  //закрытие по Esc попапов\n  React.useEffect(()=> {\n    if (!isOpen) return;\n\n    const handleEscapeClose = (evt) => {\n      if (evt.key === 'Escape') {\n        onClose();\n      }\n    }\n    document.addEventListener('keyup',handleEscapeClose);\n    return () => {\n      document.removeEventListener('keyup', handleEscapeClose);\n    }\n  },[isOpen, onClose]);\n\n \n  return(\n    <div className={`popup popup_${name} ${togglePopupState}`} onClick={handleOverlayClose}>\n     <div className={`popup__container popup__container_form popup__container_${name}`}>\n       <button className={`popup__button-close popup__button-close_${name} page__button`} onClick={handleButtonClose} aria-label=\"Кнопка Закрыть форму\" type=\"button\" />\n       {children}\n     </div>\n    </div>\n  )\n}\n\nexport default Popup;\n\n\n/*\n  function handleClickClose(evt) {\n    if (evt.target.classList.contains('popup_opened') || evt.target.classList.contains('popup__button-close') || (evt.target.classList.contains('popup__button-save'))) {\n      onClose()\n    }\n  }\n\n  <form className=\"popup__form\" onSubmit={onSubmit} name={`${name}-form`}  noValidate autoComplete=\"off\">\n         <h2 className=\"popup__heading\">\n           {title}\n         </h2>\n        {children}\n         <button className={`popup__button-save popup__button-save_${name} page__button ${!submitButtonState && 'popup__button-save_disabled'}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n           {submitText}\n         </button>\n       </form>\n*/\n","import React from 'react';\nimport Popup from './Popup';\n\nfunction PopupWithForm({ name, title, submitText, isOpen, onClose, onSubmit, submitButtonState, children }) {\n\n  return(\n    <Popup\n      name={name}\n      isOpen={isOpen}\n      onClose={onClose}>\n      <form className=\"popup__form\" onSubmit={onSubmit} name={`${name}-form`}  noValidate autoComplete=\"off\">\n          <h2 className=\"popup__heading\">\n            {title}\n          </h2>\n          {children}\n          <button className={`popup__button-save popup__button-save_${name} page__button ${!submitButtonState && 'popup__button-save_disabled'}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n            {submitText}\n          </button>\n      </form>\n      </Popup>\n  ) \n}\n\nexport default PopupWithForm;\n","import React from 'react';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditProfilePopup({ isOpen, onClose, onUpdateUser, isSubmitting }) {\n  //подписка на контекст\n  const currentUser = React.useContext(CurrentUserContext);\n\n  //стейт-переменная для управляемых компонентов формы\n  const [input, setInput] = React.useState({});\n\n  const submitButtonState = !input.name || !input.signing || !input.name.valid || !input.signing.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputNameErrorClass = !input.name || input.name.errorMessage ? 'authentification__input_error' : '';\n  const inputNameErrorCaption = !input.name || input.name.errorMessage ? 'authentification__input-error_active' : '';\n  const nameErrorMessage = input.name && input.name.errorMessage;\n\n  const inputSigningErrorClass = !input.signing || input.signing.errorMessage ? 'authentification__input_error'  : '';\n  const inputSigningErrorCaption = !input.signing || input.signing.errorMessage ? 'authentification__input-error_active'  : '';\n  const signingErrorMessage = input.signing && input.signing.errorMessage;\n\n  // После загрузки текущего пользователя из API\n  // его данные будут использованы в управляемых компонентах.\n  React.useEffect(() => {\n    setInput(prevState => ({\n      ...prevState,\n      name: {\n        value: currentUser.name,\n        valid: true,\n        errorMessage: ''\n      },\n      signing: {\n        value: currentUser.about,\n        valid: true,\n        errorMessage: ''\n      }\n      })\n    );\n  }, [currentUser]);\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём значения управляемых компонентов во внешний обработчик\n    onUpdateUser({\n      name: input.name.value,\n      about: input.signing.value,\n    });\n  }\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    }))\n  }\n\n  return (\n    <PopupWithForm\n      name=\"change-profile\"\n      title = \"Редактировать профиль\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}>\n      <fieldset className=\"popup__profile-information\">\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_profile-name ${inputNameErrorClass}`} value={input.name ? input.name.value : ''} onChange={handleUserInput} type=\"text\" name=\"name\"  placeholder=\"Имя\" required minLength={2} maxLength={40} />\n          <span className={`popup__input-error popup__input-error_type_profile-name ${inputNameErrorCaption}`}>\n            {nameErrorMessage}\n          </span>\n        </section>\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_profile-signing ${inputSigningErrorClass}`} value={input.signing ? input.signing.value : ''} onChange={handleUserInput} type=\"text\" name=\"signing\"  placeholder=\"Подпись\" required minLength={2} maxLength={200} />\n          <span className={`popup__input-error popup__input-error_type_profile-signing ${inputSigningErrorCaption}`}>\n            {signingErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </PopupWithForm>\n  )\n\n}\n\nexport default EditProfilePopup;\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction EditAvatarPopup({ isOpen, onClose, onUpdateAvatar, isSubmitting }) {\n\n  const [inputLink, setInputLink] = React.useState({});\n\n  const submitButtonState = !inputLink.value || !inputLink.value || !inputLink.valid || !inputLink.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Сохранение...';\n\n  const inputLinkErrorClass = inputLink.errorMessage ? 'popup__input_error' : '';\n  const inputLinkErrorCaption = inputLink.errorMessage ? 'popup__input-error_active' : '';\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    // Передаём новый url во внешний обработчик\n    onUpdateAvatar({\n      avatar: inputLink.value\n    });\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поле после отправки формы\n    //if нужен для того, чтобы в момент ожидания ответа от сервера\n    //кнопка не дизейблилась, и данные инпутов не очищались. так некрасиво\n    if(isSubmitting === true) {\n      setInputLink({\n        value : '',\n        valid: true,\n        errorMessage: ''\n      })\n    }\n  }, [isSubmitting]);\n\n   //обработчик инпутов\n   function handleUserInput({ target }) {\n    const { value, validity: { valid }, validationMessage } = target;\n\n    setInputLink({\n      value,\n      valid,\n      errorMessage: validationMessage\n      })\n    }\n\n  return(\n    <PopupWithForm\n      name=\"avatar\"\n      title=\"Обновить аватар\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}>\n        <fieldset className=\"popup__profile-information\">\n          <section className=\"popup__input-section\">\n            <input className={`popup__input popup__input_image-link ${inputLinkErrorClass}`} value={inputLink.value || ''} onChange={handleUserInput} type=\"url\" name=\"image-link\"  placeholder=\"Ссылка на картинку\" required />\n            <span className={`popup__input-error popup__input-error_type_image-link ${inputLinkErrorCaption}`}>\n              {inputLink.errorMessage}\n            </span>\n          </section>\n        </fieldset>\n    </PopupWithForm>\n    \n  )\n}\n\nexport default EditAvatarPopup;\n\n/*\n//валидация инпутов\n  function handleChange(evt){\n    setLink(evt.target.value)\n\n    //вызов валидации\n    handleCheckInputValidity(evt.target);\n  }\n  const [link, setLink] = React.useState('');\n  const [isValidInput, setIsValidInput] = React.useState({\n    name: '',\n    status: ''\n  });\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const [submitButton, setSubmitButton] = React.useState('');\n  const toggleInput = isValidInput.status ? ('popup__input_error'):('');\n  const toggleError = isValidInput.status ? ('popup__input-error_active'):('');\n  const toggleMessage = isValidInput.status && errorMessage;\n\n  //проверка валидности\n  function handleCheckInputValidity(input) {\n    if (!input.validity.valid) {\n      //если валидный\n      setIsValidInput({\n        name: input.name,\n        status: true\n      });\n      setErrorMessage(input.validationMessage);\n      setSubmitButton(true)\n    } else {\n      //если невалидный\n      setIsValidInput({\n        name: input.name,\n        status: false\n      });\n      setErrorMessage('');\n      setSubmitButton(false)\n    }\n  }\n  //сброс ошибок при закрытии поля\n  function resetValidation() {\n    setIsValidInput({\n      name: '',\n      status: true\n    });\n    setErrorMessage('');\n  }\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction AddPlacePopup({ isOpen, onClose, onAddPlace, isSubmitting }) {\n\n  const [input, setInput] = React.useState({});\n\n  const submitButtonState = !input.location || !input.link || !input.location.valid || !input.link.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Сохранить' : 'Добавление...';\n\n  const inputTextErrorClass = !input.location || input.location.errorMessage ? 'authentification__input_error' : '';\n  const inputTextErrorCaption = !input.location || input.location.errorMessage ? 'authentification__input-error_active' : '';\n  const TextErrorMessage = input.location && input.location.errorMessage;\n\n  const inputLinkErrorClass = !input.link || input.link.errorMessage ? 'authentification__input_error'  : '';\n  const inputLinkErrorCaption = !input.link || input.link.errorMessage ? 'authentification__input-error_active'  : '';\n  const LinkErrorMessage = input.link && input.link.errorMessage;\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n    }))\n  }\n\n  //обработчик формы\n  function handleAddPlaceSubmit(evt) {\n    evt.preventDefault();\n\n    onAddPlace({\n      name: input.location.value,\n      link: input.link.value\n    })\n  }\n\n  React.useEffect(() => {\n    //сбрасываем поля после отправки формы\n    //if нужен для того, чтобы в момент ожидания ответа от сервера\n    //кнопка не дизейблилась, и данные инпутов не очищались. так некрасиво\n    if(isSubmitting === true) {\n      setInput({});\n    }\n  }, [isSubmitting]);\n\n  return(\n    <PopupWithForm\n      name=\"add-card\"\n      title=\"Новое место\"\n      submitText={submitButtonText}\n      isOpen={isOpen}\n      onClose={onClose}\n      onSubmit={handleAddPlaceSubmit}\n      submitButtonState={submitButtonState}>\n      <fieldset className=\"popup__profile-information\">\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_location-name ${inputTextErrorClass}`} value={input.location ? input.location.value : ''} onChange={handleUserInput} type=\"text\" name=\"location\"  placeholder=\"Название\" required minLength={2} maxLength={30} />\n          <span className={`popup__input-error popup__input-error_type_location-name ${inputTextErrorCaption}`}>\n            {TextErrorMessage}\n          </span>\n        </section>\n        <section className=\"popup__input-section\">\n          <input className={`popup__input popup__input_image-link ${inputLinkErrorClass}`} value={input.link ? input.link.value : ''} onChange={handleUserInput} type=\"url\" name=\"link\"  placeholder=\"Ссылка на картинку\" required />\n          <span className={`popup__input-error popup__input-error_type_image-link ${inputLinkErrorCaption}`}>\n          {LinkErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n      </PopupWithForm>\n  )\n}\n\nexport default AddPlacePopup;\n\n/*\n//для сброса значений при закрытии формы. Зависимость от defaultForm\n  // потому что если от isOpen, я не могу добавить карточку. Данные стейтов очищаются раньше, чем отправка происходит\n  //приходится 2 раза сбрасывать\n  //стейт для сброса полей формы к начальному состоянию\n  const [defaultForm, setDefaultForm] = React.useState(false);\n  //React.useEffect(()=> {\n  //  setInputText('')\n  //  setInputLink('')\n  //  setDefaultForm(false)\n  //},[defaultForm]);\n*/\n","import React from 'react';\nimport PopupWithForm from './PopupWithForm';\n\nfunction PopupConfirmDeletion({ onClose, handleCardDelete, cardForDeletion, isSubmitting }) {\n\n  const submitButtonText = isSubmitting ? 'Да' : 'Удаление...';\n\n  function handleSubmit(evt){\n    evt.preventDefault();\n\n    handleCardDelete(cardForDeletion) \n  }\n  return(\n    <PopupWithForm\n      name=\"confirm-deletion\"\n      title=\"Вы уверены?\"\n      submitText={submitButtonText}\n      isOpen={cardForDeletion} //целый объект перекидываю для true/false результата/ работает но мб память лишнюю жрет такой способ\n      onClose={onClose}\n      onSubmit={handleSubmit}\n      submitButtonState={cardForDeletion} /> \n  )\n}\n\nexport default PopupConfirmDeletion;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction AuthWithForm({name, title, submitText, onSubmit, submitButtonState, isRegister, children}) {\n\n\n  return(\n    <div className='authentification page__block-alignment page__animation'>\n     <div className={`authentification__container authentification__container_${name}`}>\n       <form className=\"authentification__form\" onSubmit={onSubmit} name={`${name}-form`}  noValidate autoComplete=\"off\">\n         <h2 className=\"authentification__heading\">\n           {title}\n         </h2>\n        {children}\n         <button className={`authentification__button-save authentification__button-save_${name} page__button ${!submitButtonState && 'authentification__button-save_disabled'}`} disabled={!submitButtonState} type=\"submit\" value=\"Отправить на сервер\" aria-label=\"Кнопка Сохранить форму\">\n           {submitText}\n         </button>\n         {isRegister && (\n           <p className='authentification__redirection'>Уже зарегистрированы? \n           <Link to=\"/sign-in\" className=\"authentification__link page__button\">Войти</Link>\n          </p>\n         )}\n       </form>\n     </div>\n    </div>\n  )\n}\n\nexport default AuthWithForm;\n\n\n/*\n  function handleClickClose(evt) {\n    if (evt.target.classList.contains('popup_opened') || evt.target.classList.contains('popup__button-close') || (evt.target.classList.contains('popup__button-save'))) {\n      onClose()\n    }\n  }\n\n  import { Link, withRouter } from 'react-router-dom';\n\n  <div className=\"login__signup\">\n          <p>Ещё не зарегистрированы?</p>\n          <Link to=\"/register\" className=\"signup__link\">Зарегистрироваться</Link>\n        </div>\n\n        <a className='authentification__link page__button' href='/sign-in'>Войти</a>\n*/\n","import React from 'react';\nimport AuthWithForm from './AuthWithForm';\n\nfunction Login({ onLogin, isSubmitting }) {\n  const [input, setInput] = React.useState({});\n\n  const submitButtonState = !input.email || !input.password || !input.email.valid || !input.password.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Войти' : 'Вход...';\n\n  const inputEmailErrorClass = !input.email || input.email.errorMessage ? 'authentification__input_error' : '';\n  const inputEmailErrorCaption = !input.email || input.email.errorMessage ? 'authentification__input-error_active' : '';\n  const emailErrorMessage = input.email && input.email.errorMessage;\n\n  const inputPasswordErrorClass = !input.password || input.password.errorMessage ? 'authentification__input_error'  : '';\n  const inputPasswordErrorCaption = !input.password || input.password.errorMessage ? 'authentification__input-error_active'  : '';\n  const passwordErrorMessage = input.password && input.password.errorMessage;\n\n  //обработчик инпутов\n  function handleLoginInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n      })\n    )\n  }\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    onLogin(input.email.value, input.password.value)\n  }\n  \n\n  //React.useEffect(() => {\n  //  //сбрасываем поля после отправки формы\n  //  //if нужен для того, чтобы в момент ожидания ответа от сервера\n  //  //кнопка не дизейблилась, и данные инпутов не очищались. так некрасиво\n  //  if(isSubmitting === false) {\n  //    //очищаем стейты для экономии памяти\n  //    setInputEmail({});\n  //    setInputPassword({});\n  //    console.log('inputEmail', inputEmail)\n  //    console.log('inputPassword', inputPassword)\n  //    console.log('isSubmitting', isSubmitting)\n  //    \n  //    console.log(1)\n  //  }\n  //}, [isSubmitting]);\n\n  return(\n    <AuthWithForm\n      name=\"login\"\n      title=\"Вход\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={false}>\n      <fieldset className=\"authentification__profile-information\">\n        <section className=\"authentification__input-section\">\n          <input className={`authentification__input authentification__input_email ${inputEmailErrorClass}`} value={input.email ? input.email.value : ''} onChange={handleLoginInput} type=\"email\" name=\"email\"  placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`authentification__input-error authentification__input-error_type_email ${inputEmailErrorCaption}`}>\n            {emailErrorMessage}\n          </span>\n        </section>\n        <section className=\"authentification__input-section\">\n          <input className={`authentification__input authentification__input_password ${inputPasswordErrorClass}`} value={input.password ? input.password.value : ''} onChange={handleLoginInput} type=\"password\" name=\"password\"  placeholder=\"Пароль\" required minLength={6} />\n          <span className={`authentification__input-error authentification__input-error_type_password ${inputPasswordErrorCaption}`}>\n          {passwordErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n      </AuthWithForm>\n  )\n}\n\nexport default Login;\n\n  \n\n/*\nreturn(\n    <AuthWithForm\n      name=\"login\"\n      title=\"Вход\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={false}>\n      <fieldset className=\"authentification__profile-information\">\n        <section className=\"authentification__input-section\">\n          <input className={`authentification__input authentification__input_email ${inputEmailErrorClass}`} value={inputEmail.value || ''} onChange={handleLoginInput} type=\"email\" name=\"email\"  placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`authentification__input-error authentification__input-error_type_email ${inputEmailErrorCaption}`}>\n            {inputEmail.errorMessage}\n          </span>\n        </section>\n        <section className=\"authentification__input-section\">\n          <input className={`authentification__input authentification__input_password ${inputPasswordErrorClass}`} value={inputPassword.value || ''} onChange={handleLoginInput} type=\"password\" name=\"password\"  placeholder=\"Пароль\" required minLength={6} />\n          <span className={`authentification__input-error authentification__input-error_type_password ${inputPasswordErrorCaption}`}>\n          {inputPassword.errorMessage}\n          </span>\n        </section>\n      </fieldset>\n      </AuthWithForm>\n  )\n}\n\n*/","import React from 'react';\nimport AuthWithForm from './AuthWithForm';\n\nfunction Register({ onRegister, isSubmitting }) {\n  const [input, setInput] = React.useState({});\n\n  const submitButtonState = !input.email || !input.password || !input.email.valid || !input.password.valid ? false : true;\n  const submitButtonText = isSubmitting ? 'Зарегистрироваться' : 'Регистрация...';\n\n  const inputEmailErrorClass = !input.email || input.email.errorMessage ? 'authentification__input_error' : '';\n  const inputEmailErrorCaption = !input.email || input.email.errorMessage ? 'authentification__input-error_active' : '';\n  const emailErrorMessage = input.email && input.email.errorMessage;\n\n  const inputPasswordErrorClass = !input.password || input.password.errorMessage ? 'authentification__input_error'  : '';\n  const inputPasswordErrorCaption = !input.password || input.password.errorMessage ? 'authentification__input-error_active'  : '';\n  const passwordErrorMessage = input.password && input.password.errorMessage;\n\n  //обработчик инпутов\n  function handleUserInput({ target }) {\n    const { name, value, validity: { valid }, validationMessage } = target;\n\n    setInput(prevState => ({\n      ...prevState,\n      [name]: {\n        value,\n        valid,\n        errorMessage: validationMessage\n      }\n      })\n    )\n  }\n\n  //обработчик формы\n  function handleSubmit(evt) {\n    evt.preventDefault();\n\n    onRegister(input.email.value, input.password.value)\n\n  }\n\n  //React.useEffect(() => {\n  //  //сбрасываем поля после отправки формы\n  //  //if нужен для того, чтобы в момент ожидания ответа от сервера\n  //  //кнопка не дизейблилась, и данные инпутов не очищались. так некрасиво\n  //  if(isSubmitting === true) {\n  //    setInputText({});\n  //    setInputLink({});\n  //  }\n  //}, [isSubmitting]);\n\n  return(\n    <AuthWithForm\n      name=\"register\"\n      title=\"Регистрация\"\n      submitText={submitButtonText}\n      onSubmit={handleSubmit}\n      submitButtonState={submitButtonState}\n      isRegister={true}>\n      <fieldset className=\"authentification__profile-information\">\n        <section className=\"authentification__input-section\">\n          <input className={`authentification__input authentification__input_email ${inputEmailErrorClass}`} value={input.email ? input.email.value : ''} onChange={handleUserInput} type=\"email\" name=\"email\"  placeholder=\"Email\" required minLength={6} maxLength={30} />\n          <span className={`authentification__input-error authentification__input-error_type_email ${inputEmailErrorCaption}`}>\n            {emailErrorMessage}\n          </span>\n        </section>\n        <section className=\"authentification__input-section\">\n          <input className={`authentification__input authentification__input_password ${inputPasswordErrorClass}`} value={input.password ? input.password.value : ''} onChange={handleUserInput} type=\"password\" name=\"password\"  placeholder=\"Пароль\" required minLength={6} />\n          <span className={`authentification__input-error authentification__input-error_type_password ${inputPasswordErrorCaption}`}>\n          {passwordErrorMessage}\n          </span>\n        </section>\n      </fieldset>\n    </AuthWithForm>\n  )\n}\n\nexport default Register;\n\n  \n\n/*\n<PopupWithForm\n        name=\"add-card\"\n        title=\"Новое место\"\n        submitText={submitButtonText}\n        isOpen={isOpen}\n        onClose={onClose}\n        onSubmit={handleAddPlaceSubmit}\n        submitButtonState={submitButtonState}>\n        \n        </PopupWithForm>\n*/","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Popup from './Popup';\n\nfunction StatusPopup({ isOpen, onClose, popupStatusMessage }) {\n    const history = useHistory();\n    const checkout = popupStatusMessage === 'Вы успешно зарегистрировались!'\n    const image = checkout ? 'popup__image-status_type_success' : 'popup__image-status_type_reject'\n    function handleClose(){\n        onClose()\n        //редиректим хуком на страницу логина при успешной регистрации\n        checkout && history.push('./sign-in')\n    }\n  return(\n    <Popup\n      name=\"status\"\n      isOpen={isOpen}\n      onClose={handleClose}>\n        <div className=\"popup__status\">\n            <div className={`popup__image-status ${image}`}></div>\n            <h2 className=\"popup__heading\">\n                {popupStatusMessage}\n            </h2>\n        </div>\n    </Popup>\n  )\n}\n\nexport default StatusPopup;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ component: Component, ...props }) => {\n    return (\n        <Route>\n            {()=>{\n                return props.loggedIn ? <Component {...props} /> : <Redirect to='/mesto-react/sign-in' />\n            }}\n        </Route>\n    )\n}\n\nexport default ProtectedRoute;\n","import React from 'react';\n\nfunction Spinner() {\n  return(\n    <div className=\"spinner page__section\">\n\t    <div className=\"spinner__part spinner__part_one\"></div>\n\t    <div className=\"spinner__part spinner__part_two\"></div>\n\t    <div className=\"spinner__part spinner__part_three\"></div>\n\t    <div className=\"spinner__part spinner__part_four\"></div>\n\t    <div className=\"spinner__part spinner__part_five\"></div>\n\t    <div className=\"spinner__part spinner__part_six\"></div>\n\t    <div className=\"spinner__part spinner__part_seven\"></div>\n\t    <div className=\"spinner__part spinner__part_eight\"></div>\n    </div>\n  )\n}\n\nexport default Spinner;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { useHistory } from 'react-router-dom';\n\nimport api from '../utils/api';\nimport { register, login, getContent } from '../utils/auth';\nimport CurrentUserContext from '../contexts/CurrentUserContext';\n\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport ImagePopup from './ImagePopup';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport PopupConfirmDeletion from './PopupConfirmDeletion';\nimport Login from './Login';\nimport Register from './Register';\nimport StatusPopup from './StatusPopup';\nimport ProtectedRoute from './ProtectedRoute';\nimport Spinner from './Spinner';\n\nfunction App() {\n\n  const [isEditAvatarPopupOpen, setIsEditAvatarPopupOpen] = React.useState(false);\n  const [isAddPlacePopupOpen, setIsAddPlacePopupOpen] = React.useState(false);\n  const [isEditProfilePopupOpen, setIsEditProfilePopupOpen] = React.useState(false);\n  const [cardForDeletion, setCardForDeletion] = React.useState('');\n  const [selectedCard, setSelectedCard] = React.useState(null);\n  const [popupStatusMessage, setPopupStatusMessage] = React.useState('');\n  const [loggedIn, setIsLoggedIn] = React.useState(false);\n  const [email, setEmail] = React.useState('');\n  const history = useHistory();\n  //стейт для юзеринфо\n  const [currentUser, setCurrentUser] = React.useState(null);\n  //проверяем статус получения данных. Если false, не рендерим Main и Footer\n  const [isUserDataReceived, setIsUserDataReceived] = React.useState(false);\n  //стейт для карточек\n  const [cards, setCards] = React.useState([]);\n  // submit status\n  const [isSubmitting, setIsSubmitting] = React.useState({\n    profile: true,\n    avatar: true,\n    place: true,\n    login: true,\n    register: true,\n    deletion: true\n  });\n\n  //обработчики открытия-закрытия попапов с формой\n  function handleEditAvatarClick() {\n    setIsEditAvatarPopupOpen(true);\n  }\n  function handleAddPlaceClick() {\n    setIsAddPlacePopupOpen(true);\n  }\n  function handleEditProfileClick() {\n    setIsEditProfilePopupOpen(true);\n  }\n  //попап с картинкой\n  function handleCardClick(state) {\n    setSelectedCard(state);\n  }\n  //закрытие попапа\n  function closeAllPopups() {\n    setIsEditProfilePopupOpen(false);\n    setIsEditAvatarPopupOpen(false);\n    setIsAddPlacePopupOpen(false);\n    setSelectedCard(null);\n    setPopupStatusMessage('');\n    setCardForDeletion('')\n  }\n\n\n  React.useEffect(()=> {\n    //запросы на получение инфы о юзере и карточках посылаются только когда юзер залогинен\n    //а то тупо как-то впустую запросы слать\n    loggedIn && (\n      Promise.all([api.getUserInfo(), api.getCards()])\n      .then(([userData, cardData]) => {\n        setCurrentUser(userData);\n        setCards(cardData);\n        setIsUserDataReceived(true);\n      })\n      .catch(err => {\n        console.log(\"Ошибка получения данных:\", err)\n      })\n    )\n\n  },[loggedIn])\n\n  //обновление данных пользователя новыми данными из формы редактирования профиля\n  function handleUpdateUser(newUserData) {\n    //submit status в момент ожидания\n    setIsSubmitting(prevState => ({\n      ...prevState,\n      profile: false\n    }))\n\n    api.sendUserInfo(newUserData)\n    .then((newUserDataFromServer) => {\n      //обновляем контекст стейт currentUser после редактирования формы\n      setCurrentUser(newUserDataFromServer);\n      closeAllPopups();\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n    .finally(() => {\n      setIsSubmitting(prevState => ({\n        ...prevState,\n        profile: true\n      }))\n    })\n  }\n\n  //обновление аватара новыми данными из формы аватара\n  function handleUpdateAvatar(newUrl) {\n    //submit status в момент ожидания\n    setIsSubmitting(prevState => ({\n      ...prevState,\n      avatar: false\n    }));\n    api.sendUserAvatar(newUrl)\n    .then((newUserDataFromServer) => {\n      //обновляем контекст стейт currentUser после редактирования формы\n      setCurrentUser(newUserDataFromServer);\n      closeAllPopups();\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n    .finally(() => {\n      //submit status в конце\n      setIsSubmitting(prevState => ({\n        ...prevState,\n        avatar: true\n      }));\n    })\n  }\n\n  //колбэк лайка карточки\n  function handleCardLike(activatedCard) {\n    //проверяем, есть ли уже лайк на этой карточке\n    const isLiked = activatedCard.likes.some(like => like._id === currentUser._id);\n\n    //Отправляем запрос в API и получаем обновлённые данные карточки\n    api.changeLikeCardStatus(activatedCard._id, !isLiked)\n    .then((updatedCard) => {\n      //обновляем массив карточек cards для рендеринга с новым кол-вом лайков\n      setCards((state) => state.map((c) => c._id === activatedCard._id ? updatedCard : c));\n      //setCards((state) => {\n      //  //в изначальном массиве перебираем через map карточки\n      //  //если находим лайкнутую, обновляем ее\n      //  //если находим нелайкнутую, не обновляем ее\n      //  return (state.map( (card) => {\n      //    return (card._id === activatedCard._id ? updatedCard : card)\n      //  }))\n      //})\n    })\n    .catch((err) => {\n      console.log(\"ошибка лайка\", err)\n    });\n  }\n\n  //колбэк удаления карточки\n  function handleCardDelete(card) {\n    //меняем стейт кнопки на ожидание\n    setIsSubmitting(prevState => ({\n      ...prevState,\n      deletion: false\n    }))\n    api.deleteCard(card._id)\n    .then( () => {\n      //оборачиваем setCards в колбек, чтобы удаление карточки со страницы происходило только после возвращения ответа от сервера\n      //после удаления карточки в стейт Cards записываем новый массив оставшихся карточек\n      setCards(\n        cards.filter(item => {\n          //возвращаем только те карточки, которые не совпадают по id с удаленной\n          return item._id !== card._id\n      }))\n      //после успешного удаления карточки закрываем попап\n      closeAllPopups();\n    })\n    .catch((err) => {\n      console.log(\"ошибка получения данных\", err)\n    })\n    .finally(() => {\n      //submit status в конце\n      setIsSubmitting(prevState => ({\n        ...prevState,\n        deletion: true\n      }))\n    })\n  }\n\n  //добавление новой карточки\n  function handleAddPlace(newCardData) {\n    //submit status в момент ожидания\n    setIsSubmitting(prevState => ({\n      ...prevState,\n      place: false\n    }));\n    api.sendNewCard(newCardData)\n    .then((newCardFromServer) => {\n      //в стейт Cards дозаписываем новую только что созданную карточку\n      setCards([newCardFromServer, ...cards]);\n      closeAllPopups();\n    })\n    .catch(err => {\n      console.log(\"Ошибка получения данных:\", err)\n    })\n    .finally(() => {\n      //submit status в конце\n      setIsSubmitting(prevState => ({\n        ...prevState,\n        place: true\n      }));\n    })\n  }\n\n\n\n  console.log(isSubmitting)\n\n  //сабмит регистрации\n  function onRegister(email, password){\n    //меняем стейт кнопки на ожидание\n    setIsSubmitting(prevState => ({\n      ...prevState,\n      register: false\n    }))\n\n    // сюда добавим логику обработки формы регистрации\n    register(email, password)\n    .then(data => {\n      //добавляем успешный месседж для попапа\n      setPopupStatusMessage('Вы успешно зарегистрировались!')\n    })\n    .catch(err => {\n      console.log(err)\n      setPopupStatusMessage('Что-то пошло не так! Попробуйте ещё раз.')\n    })\n    .finally(()=>{\n      setIsSubmitting(prevState => ({\n        ...prevState,\n        register: true\n      }))\n    })\n  }\n\n  //сабмит логина\n  function onLogin(email, password){\n    //меняем стейт кнопки на ожидание\n    setIsSubmitting(prevState => ({\n      ...prevState,\n      login: false\n    }))\n    console.log('login', isSubmitting)\n\n    if (!email || !password) {\n      return\n    }\n\n    login(email, password)\n    .then(data => {\n      if(!data) {\n        //setPopupMessage('Что-то пошло не так! Попробуйте ещё раз.')\n      }\n      if(data.token) {\n        //вход успешен\n        setIsLoggedIn(true);\n        //сохраняем токен пользователя в localStorage\n        localStorage.setItem('jwt', data.token)\n        //запишем емейл для подстановки в шапку, потому что он не подставляется в шапку при входе через логин\n        setEmail(email)\n        //перенаправляем на главную\n        history.push('/mesto-react')\n      }\n    })\n    .catch(err => {\n      console.log(err)\n      setPopupStatusMessage('Что-то пошло не так! Попробуйте ещё раз.')\n      //setPopupMessage('Что-то пошло не так! Попробуйте ещё раз.')\n      //console.log(popupMessage)\n    })\n    .finally(()=>{\n      setIsSubmitting(prevState => ({\n        ...prevState,\n        login: true\n      }))\n    })\n  }\n\n  //разлогиниться\n  function onSignOut(){\n    localStorage.removeItem('jwt');//удаляем токен\n    setIsLoggedIn(false);//стейт - разлогиниваем\n    history.push('/mesto-react/sign-in');//переход на страницу логина\n  }\n\n\n  function tokenCheck(){\n    // если у пользователя есть токен в localStorage,\n    // эта функция проверит, действующий он или нет\n    if(localStorage.getItem('jwt')){\n      const jwt = localStorage.getItem('jwt');\n      if(jwt){\n        getContent(jwt)\n        .then(res => {\n          if(res){\n            //запишем емейл для подстановки в шапку\n            setEmail(res.data.email)\n            setIsLoggedIn(true);\n            history.push('/mesto-react');\n          }\n        })\n        .catch(err => {\n          console.log(err)\n        })\n      }\n    }\n  }\n  //срабатывание проверки токена и автологина при загрузке страницы\n  React.useEffect(()=>{\n    tokenCheck()\n    console.log('залогонен по токену')\n  },[])\n\n  return (\n    <CurrentUserContext.Provider value={currentUser}>\n      <div className=\"page\">\n        <Header\n          onSignOut={onSignOut}\n          email={email} />\n        {loggedIn ? ( //если залогинен - отображаем контент или спиннер\n          isUserDataReceived ? (//если ответ с инфо и карточками не получен - показываем спиннер\n          <>\n            <ProtectedRoute\n              path='/mesto-react'\n              loggedIn={loggedIn}\n              cards={cards}\n              onEditProfile={handleEditProfileClick}\n              onAddPlace={handleAddPlaceClick}\n              onEditAvatar={handleEditAvatarClick}\n              onCardClick={handleCardClick}\n              onCardLike={handleCardLike}\n              onCardDelete={setCardForDeletion}\n              component={Main}/>\n            <EditProfilePopup\n              isOpen={isEditProfilePopupOpen}\n              onClose={closeAllPopups}\n              onUpdateUser={handleUpdateUser}\n              isSubmitting={isSubmitting.profile}/>\n            <EditAvatarPopup\n              isOpen={isEditAvatarPopupOpen}\n              onClose={closeAllPopups}\n              onUpdateAvatar={handleUpdateAvatar}\n              isSubmitting={isSubmitting.avatar}/>\n            <AddPlacePopup\n              isOpen={isAddPlacePopupOpen}\n              onClose={closeAllPopups}\n              onAddPlace={handleAddPlace}\n              isSubmitting={isSubmitting.place}/>\n            <ImagePopup\n              card={selectedCard}\n              onClose={closeAllPopups}/>\n            <PopupConfirmDeletion\n              onClose={closeAllPopups}\n              handleCardDelete={handleCardDelete}\n              cardForDeletion={cardForDeletion}\n              isSubmitting={isSubmitting.deletion} />\n          </>\n          ):(\n            <Spinner/>\n          )\n        ):(\n          <>\n            <Route path='/mesto-react/sign-up'>\n              <Register\n                onRegister={onRegister}\n                isSubmitting={isSubmitting.register}/>\n            </Route>\n            <Route path='/mesto-react/sign-in'>\n              <Login\n                onLogin={onLogin}\n                isSubmitting={isSubmitting.login} />\n            </Route>\n            <StatusPopup\n              isOpen={popupStatusMessage}\n              onClose={closeAllPopups}\n              popupStatusMessage={popupStatusMessage}/>\n          </>\n        )}\n        <Footer />\n      </div>\n    </CurrentUserContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}